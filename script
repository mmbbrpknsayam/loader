if not game:IsLoaded() then
    game.Loaded:Wait()
end

local validKeys = {
    ["Lqv5Y8Hd29MWcAz"] = true,
}

if not script_key or not validKeys[script_key] then
    game.Players.LocalPlayer:Kick("Whitelist error Invalid key. Please use the correct key.")
    return
end

local Projects = {
    ["Grow a Garden"] = {
        GameId = 7436755782;
        PlaceIds = {};
        Loader = "https://raw.githubusercontent.com/moilthink/script-r/refs/heads/main/grow";
    };
    ["Door"] = {
        GameId = 2440500124;
        PlaceIds = {};
        Loader = "https://raw.githubusercontent.com/moilthink/script-r/refs/heads/main/door";
    };
    ["Slap Battle"] = {
        GameId = 2380077519;
        PlaceIds = {};
        Loader = "https://raw.githubusercontent.com/moilthink/script-r/refs/heads/main/slap";
    };
    ["Night Forest"] = {
        GameId = {};
        PlaceIds = 79546208627805;
        Loader = "https://raw.githubusercontent.com/mmbbrpknsayam/Script/refs/heads/main/nightforest.lua";
    };
    ["Dead Rails"] = {
        GameId = 7018190066;
        PlaceIds = {};
        Loader = "https://raw.githubusercontent.com/moilthink/script-r/refs/heads/main/rail";
    };
}

local Loaded = false
local gameId = game.GameId

for _, v in pairs(Projects) do
    if v.GameId == gameId or table.find(v.PlaceIds, placeId) then
        Loaded = true
        print("✅ Loader found for", v.GameId == gameId and ("GameId: " .. gameId) or ("PlaceId: " .. placeId))
        loadstring(game:HttpGet(v.Loader))()
        break
    end
end

if not Loaded then
    warn("❌ No loader found for this GameId or PlaceId:", gameId, placeId)
end
